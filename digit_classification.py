# -*- coding: utf-8 -*-
"""Copy of TensorFlow Beginner - Basic Image Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T7UjXMt1DYCHR-PD_s1G1QAXycpQuiVX

![Rhyme](https://rhyme.com/assets/img/logo-dark.png)

# Classify handwritten images using Tensorflow and keras

The aim of this project is to create and train a Neural Network model that will be able to predict digits from hand-written images with a high degree of accuracy.
"""

import tensorflow as tf

print('Using TensorFlow version', tf.__version__)
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)

"""Import the dataset (MNIST dataset)"""

from tensorflow.keras.datasets import mnist

(x_train, y_train), (x_test, y_test) = mnist.load_data()

print('x_train shape: ', x_train.shape)
print('y_train shape: ', y_train.shape)
print('x_test shape: ', x_test.shape)
print('y_test shape: ', y_test.shape)

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline

plt.imshow(x_train[5], cmap = 'binary')
plt.show()

y_train[5]

y_train[:10]

"""One Hot Encoding is done


"""

from tensorflow.keras.utils import to_categorical

y_train_encoded = to_categorical(y_train)
y_test_encoded = to_categorical(y_test)

"""Check the shape of the encoded labels."""

print('y_train shape: ', y_train_encoded.shape)
print('y_test shape: ', y_test_encoded.shape)

print(y_train[0])
y_train_encoded[0]

"""Create a Neural Network which will take 784 dimensional vectors as inputs (28 rows * 28 columns) and will output a 10 dimensional vector (For the 10 classes). 

To convert the input to the required format, use numpy to unroll the examples from `(28, 28)` arrays to `(784, 1)` vectors.
"""

import numpy as np

x_train_reshaped = np.reshape(x_train, (60000, 784))
x_test_reshaped = np.reshape(x_test, (10000, 784))

print('x_train_reshaped shape: ', x_train_reshaped.shape)
print('x_test_reshaped shape: ', x_test_reshaped.shape)

"""Each element in each example is a pixel value."""

print(set(x_train_reshaped[0]))

"""Pixel values range from 0 to 255. It is better is we normalize the data"""

x_mean = np.mean(x_train_reshaped)
x_std = np.std(x_train_reshaped)

print('mean: ', x_mean)
print('std: ', x_std)

epsilon = 1e-10
x_train_norm = (x_train_reshaped - x_mean)/(x_std + epsilon)
x_test_norm = (x_test_reshaped - x_mean)/(x_std + epsilon)

print(set(x_train_norm[0]))

"""
Sequential class defined in Keras is used to create our model. All the layers are going to be Dense layers. This means all the nodes of a layer would be connected to all the nodes of the preceding layer i.e. densely connected."""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential([
    Dense(128, activation = 'relu', input_shape = (784,)),
    Dense(128, activation = 'relu'),
    Dense(10, activation = 'softmax')
])

"""In order to optimize the weights and biases as per the given data the stochastic gradient descent algorithm is used.

Categorical cross entropy is used as the loss function
"""

model.compile(
    optimizer = 'sgd',
    loss = 'categorical_crossentropy',
    metrics = ['accuracy']
)

model.summary()

"""We are going to train the model for 3 epochs."""

h = model.fit(
    x_train_norm,
    y_train_encoded,
    epochs = 3
)

loss, accuracy = model.evaluate(x_test_norm, y_test_encoded)

print('test set accuracy: ', accuracy * 100)

"""Look at the predictions"""

preds = model.predict(x_test_norm)

print('shape of preds: ', preds.shape)

plt.figure(figsize = (12, 12))

start_index = 0

for i in range(25):
    plt.subplot(5, 5, i + 1)
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    pred = np.argmax(preds[start_index + i])
    actual = np.argmax(y_test_encoded[start_index + i])
    col = 'g'
    if pred != actual:
        col = 'r'
    plt.xlabel('i={} | pred={} | true={}'.format(start_index + i, pred, actual), color = col)
    plt.imshow(x_test[start_index + i], cmap='binary')
plt.show()

"""
Enter the index value to plot the probability scores 
"""
index = 6

plt.plot(preds[index])
plt.show()

"""Hopefully this gave you an insight into using Tensorflow and its Keras implementation to get started with training Neural Networks!"""